basePath: /
definitions:
  SongHandlers.CreateSongRequest:
    properties:
      group:
        type: string
      song:
        type: string
    type: object
  models.Song:
    properties:
      group:
        type: string
      id:
        type: integer
      link:
        type: string
      release_date:
        type: string
      song:
        type: string
      text:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API Server for TodoList Application
  title: SongLibraryAPI
  version: "1.0"
paths:
  /songs:
    get:
      description: Fetch songs from the database with optional filtering on all fields
        and pagination
      parameters:
      - description: Filter by group
        in: query
        name: group
        type: string
      - description: Filter by song name
        in: query
        name: song
        type: string
      - description: Filter by release date
        in: query
        name: release_date
        type: string
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      - description: Number of items per page (default is 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Song'
            type: array
        "500":
          description: Error fetching data
          schema:
            type: string
      summary: Get all songs with filtering and pagination
      tags:
      - songs
  /songs/create:
    post:
      consumes:
      - application/json
      description: Create a new song in the database
      parameters:
      - description: Song to create
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/SongHandlers.CreateSongRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Song'
        "400":
          description: Invalid JSON format or missing group/song
          schema:
            type: string
        "500":
          description: Failed to create song
          schema:
            type: string
      summary: Create a new song
      tags:
      - songs
  /songs/delete/{id}:
    delete:
      description: Delete a song from the database using its ID
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Song deleted successfully
          schema:
            type: string
        "400":
          description: Invalid song ID
          schema:
            type: string
        "404":
          description: Song not found
          schema:
            type: string
        "500":
          description: Error deleting the song
          schema:
            type: string
      summary: Delete a song by ID
      tags:
      - songs
  /songs/lyrics/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve the lyrics of a song, paginated by verses
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      - description: Number of verses per page (default is 2)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated verses
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input or song not found
          schema:
            type: string
        "500":
          description: Error fetching the song lyrics
          schema:
            type: string
      summary: Get song lyrics with pagination by verses
      tags:
      - songs
  /songs/update/{id}:
    put:
      consumes:
      - application/json
      description: Update an existing song's data in the database
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated song data
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/models.Song'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Song'
        "400":
          description: Invalid song ID or bad request
          schema:
            type: string
        "404":
          description: Song not found
          schema:
            type: string
        "500":
          description: Error updating the song
          schema:
            type: string
      summary: Update a song by ID
      tags:
      - songs
swagger: "2.0"
